"use strict";var dom99Config=(function(){"use strict";var miss=Symbol(), getValueElseDefaultDecorator=function getValueElseDefaultDecorator(object1){return function(key){if(object1.hasOwnProperty(key)){return object1[key];}return object1.miss;};}, EventForTagAndType=getValueElseDefaultDecorator({"input.text":"input", "input.checkbox":"click", "input.radio":"click", miss:"input"}), PropertyForTag=getValueElseDefaultDecorator({input:"value", miss:"textContent"}), PropertyForInputType=getValueElseDefaultDecorator({checkbox:"checked", radio:"checked", miss:"value"}), PropertyBooleanList=["checked"], getVisibleProperty=function getVisibleProperty(tagName, type){if(tagName === "input" && type){return PropertyForInputType(type);}return PropertyForTag(tagName);};return Object.freeze({EventForTagAndType:EventForTagAndType, getVisibleProperty:getVisibleProperty, PropertyBooleanList:PropertyBooleanList});})();var dom99=(function(){"use strict";var variables={}, variablesSubscribers={}, elements={}, functions={}, usingInnerScope=false, innerScope=undefined;var directiveNameFx="data-fx", directiveNameVr="data-vr", directiveNameEl="data-el", attributeValueDoneSign="â˜€", tokenSeparator="-", walkTheDomElements=(function(_walkTheDomElements){var _walkTheDomElementsWrapper=function walkTheDomElements(){return _walkTheDomElements.apply(this, arguments);};_walkTheDomElementsWrapper.toString = function(){return _walkTheDomElements.toString();};return _walkTheDomElementsWrapper;})(function(element, aFunction){aFunction(element);element = element.firstElementChild;while(element) {walkTheDomElements(element, aFunction);element = element.nextSibling;}}), getTagName=function getTagName(element){return element.tagName.toLowerCase();}, addEventListener=function addEventListener(element, eventName, aFunction){var useCapture=arguments[3] === undefined?false:arguments[3];element.addEventListener(eventName, aFunction, useCapture);}, applyFx=function applyFx(element, directiveTokens){var eventNames=directiveTokens[0], functionName=directiveTokens[1], functionLookUp=function functionLookUp(event){functions[functionName](event);};eventNames.split(",").forEach(function(eventName){addEventListener(element, eventName, functionLookUp);});}, applyVr=function applyVr(element, directiveTokens){var variableName=directiveTokens[0], temp=undefined, variablesScope=variables, variablesSubscribersScope=variablesSubscribers, visibleTextPropertyName=undefined, tagName=getTagName(element);if(usingInnerScope){variablesScope = variables[innerScope];variablesSubscribersScope = variablesSubscribers[innerScope];}if(variablesScope.hasOwnProperty(variableName)){temp = variablesScope[variableName];}if(variablesSubscribersScope[variableName]){variablesSubscribersScope[variableName].push(element);}else {(function(){var x=undefined;variablesSubscribersScope[variableName] = [element];Object.defineProperty(variablesScope, variableName, {get:function get(){return x;}, set:function set(newValue){if(newValue === undefined){console.warn("Use strings values with dom99.vr.x= , not undefined!");return;}x = String(newValue);variablesSubscribersScope[variableName].forEach(function(currentElement){visibleTextPropertyName = dom99Config.getVisibleProperty(getTagName(currentElement), currentElement.type);if(String(currentElement[visibleTextPropertyName]) !== x){if(visibleTextPropertyName in dom99Config.PropertyBooleanList){currentElement[visibleTextPropertyName] = !!newValue;}else {currentElement[visibleTextPropertyName] = x;}}});}, enumerable:true, configurable:false});})();}if(temp !== undefined){variablesScope[variableName] = temp;}visibleTextPropertyName = dom99Config.getVisibleProperty(tagName, element.type);addEventListener(element, dom99Config.EventForTagAndType("" + getTagName(element) + "." + element.type), function(event){variablesScope[variableName] = event.target[visibleTextPropertyName];});}, applyEl=function applyEl(element, directiveTokens){var elementName=directiveTokens[0], elementsScope=elements;if(usingInnerScope){elementsScope = elements[innerScope];}if(elementsScope[elementName]){console.warn("cannot have 2 elements with the same name, overwriting dom99.el." + elementName);}elementsScope[elementName] = element;}, templateRender=function templateRender(templateName, scope){if(!variables.hasOwnProperty(scope)){elements[scope] = {};variables[scope] = {};variablesSubscribers[scope] = {};}else {console.warn("templateRender with scope=" + scope + " is already taken, you must change the scope if you want to have data not shared between all clones");}usingInnerScope = true;innerScope = scope;var clone=document.importNode(elements[templateName].content, true);linkJsAndDom(clone);usingInnerScope = false;return clone;}, forgetScope=function forgetScope(scope){delete elements[scope];delete variables[scope];delete variablesSubscribers[scope];}, tryApplyDirective=function tryApplyDirective(element, customAttribueName, ApplyADirective){var customAttributeValue=undefined;if(element.hasAttribute(customAttribueName)){customAttributeValue = element.getAttribute(customAttribueName);if(!customAttributeValue.startsWith(attributeValueDoneSign)){ApplyADirective(element, customAttributeValue.split(tokenSeparator));element.setAttribute(customAttribueName, attributeValueDoneSign + customAttributeValue);}}}, tryApplyDirectives=function tryApplyDirectives(element){if(element.hasAttribute){tryApplyDirective(element, directiveNameVr, applyVr);tryApplyDirective(element, directiveNameFx, applyFx);tryApplyDirective(element, directiveNameEl, applyEl);}}, linkJsAndDom=function linkJsAndDom(){var startElement=arguments[0] === undefined?document.body:arguments[0];walkTheDomElements(startElement, tryApplyDirectives);};return Object.freeze({vr:variables, el:elements, fx:functions, templateRender:templateRender, forgetScope:forgetScope, linkJsAndDom:linkJsAndDom});})();if(typeof module !== "undefined" && typeof module.exports !== "undefined"){module.exports = dom99;}
